{"version":3,"sources":["contants/student_data.js","page/student_details/student_detail.js","page/student_add/index.js","serviceWorker.js","index.js"],"names":["student_data","student_list_columns","title","dataIndex","key","sorter","a","b","name","localeCompare","render","charAt","toUpperCase","slice","marks","parseInt","align","StudentDetail","processData","data","maxMarkStudent","rollNumber","maxMarks","subjectsArray","forEach","studentRecord","sumOfSubject","map","subject","reduce","state","record","topperStudent","this","className","columns","dataSource","size","bordered","rowKey","rowClassName","showTopperAndFail","pagination","total","length","pageSize","hideOnSinglePage","scroll","y","type","href","Component","layout","labelCol","span","wrapperCol","buttonItemLayout","offset","validateMessages","required","types","number","onFinish","values","console","log","alert","JSON","stringify","StudentAddForm","Item","label","rules","pattern","RegExp","message","maxlength","max","htmlType","Boolean","window","location","hostname","match","App","exact","path","component","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3b27da73.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const student_data = [\r\n    {\r\n        \"name\":\"rajiv\",\r\n        \"marks\":{\r\n            \"Maths\":\"18\",\r\n            \"English\":\"21\",\r\n            \"Science\":\"45\"\r\n        },\r\n        \"rollNumber\":\"KV2017-5A2\"\r\n    },\r\n    {\r\n        \"name\":\"abhishek\",\r\n        \"marks\":{\r\n            \"Maths\":\"43\",\r\n            \"English\":\"30\",\r\n            \"Science\":\"37\"\r\n        },\r\n        \"rollNumber\":\"KV2017-5A1\"\r\n    },\r\n    {\r\n        \"name\":\"zoya\",\r\n        \"marks\":{\r\n            \"Maths\":\"42\",\r\n            \"English\":\"31\",\r\n            \"Science\":\"50\"\r\n        },\r\n        \"rollNumber\":\"KV2017-5A3\"\r\n    }\r\n]\r\n\r\nexport const student_list_columns = [\r\n    {\r\n      title:<b><i>Student Name</i></b>,\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      sorter: (a, b) => a.name.localeCompare(b.name),\r\n      render:name=><p>{name.charAt(0).toUpperCase() +\r\n           name.slice(1)}</p>\r\n    },\r\n\r\n\r\n    {\r\n      title:<b><i>Roll Number</i></b>,\r\n      dataIndex: 'rollNumber',\r\n      key: 'rollNumber',\r\n    },\r\n    {\r\n      title:<b><i>Total Marks</i></b>,\r\n      dataIndex: 'marks',\r\n      render: marks => <p>{parseInt(marks[\"Maths\"]) + parseInt(marks[\"English\"]) + parseInt(marks[\"Science\"])}</p>,\r\n      key: 'marks',\r\n      align: 'right',\r\n    },\r\n    {\r\n      title:<b><i>Status</i></b>,\r\n      dataIndex: 'marks',\r\n      render: marks => <p>{(marks[\"Maths\"] > 20 && marks[\"English\"] > 20 && marks[\"Science\"] > 20) ? \"Pass\" : \"Fail\"}</p>,\r\n      key: 'marks'\r\n    },\r\n];\r\n","import React, { Component } from 'react';\r\nimport { Table, Button } from 'antd';\r\nimport { student_data, student_list_columns } from '../../contants/student_data';\r\nimport './student_detail.css';\r\n\r\nclass StudentDetail extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      student_data: student_data\r\n    }\r\n    this.processData(student_data)\r\n  };\r\n\r\n  processData = (data) => {\r\n    let maxMarkStudent={ rollNumber: null, maxMarks: -1 };\r\n    let subjectsArray = [\"Maths\", \"English\", \"Science\"];\r\n    data.forEach(studentRecord => {\r\n      let sumOfSubject = subjectsArray.map(subject => studentRecord[\"marks\"][subject]).reduce((a,b) => parseInt(a)+parseInt(b), 0)\r\n      maxMarkStudent = sumOfSubject > maxMarkStudent[\"maxMarks\"] ?\r\n                      {rollNumber: studentRecord[\"rollNumber\"], maxMarks: sumOfSubject}  : maxMarkStudent;\r\n    });\r\n    return maxMarkStudent;\r\n  };\r\n\r\n  showTopperAndFail(record, topperStudent) {\r\n    let cssClassName = record.marks[\"Maths\"] > 20 && record.marks[\"English\"] > 20 && record.marks[\"Science\"] > 20 ? \"\" : \"showRedRow\";\r\n    return cssClassName + (record[\"rollNumber\"] === topperStudent[\"rollNumber\"] ? \" showGreenRow\" : \"\");\r\n  }\r\n\r\n  render() {\r\n    const topperStudent = this.processData(this.state.student_data);\r\n    return (\r\n      <div className=\"container\">\r\n        <Table\r\n          columns={student_list_columns}\r\n          dataSource={this.state.student_data}\r\n          size=\"small\"\r\n          bordered\r\n          rowKey=\"rollNumber\"\r\n\r\n          rowClassName={(record) => this.showTopperAndFail(record, topperStudent)}\r\n          pagination={{\r\n            total: student_data.length,\r\n            pageSize: student_data.length,\r\n            hideOnSinglePage: true\r\n          }}\r\n          title={() =><b>Students Result Board</b>}\r\n          scroll={{\r\n            y:500\r\n          }}\r\n        />\r\n        <Button type=\"primary\"><a href=\"/add\">Add Student</a></Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StudentDetail;\r\n","import React from 'react';\r\nimport 'antd/dist/antd.css';\r\n\r\nimport { Form, Input, InputNumber, Button,Card } from 'antd';\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n  },\r\n};\r\nconst buttonItemLayout ={\r\n  wrapperCol: { offset: 10 },\r\n};\r\n\r\nconst validateMessages = {\r\n    required: '${label} is required!',\r\n    types: {\r\n      number: '${label} is not a validate year!',\r\n    },\r\n};\r\n\r\nconst onFinish = values => {\r\n    console.log(values);\r\n    alert(\"Value added to the server \"+ JSON.stringify(values));\r\n    //write ajax using axios to save data on backend\r\n};\r\n\r\nconst StudentAddForm = () => {\r\n    return (\r\n        <div className=\"containiner\">\r\n        <Card title=\"School Admission Form\">\r\n        <Form  name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n            <Form.Item {...layout}\r\n                name={['name']}\r\n                label=\"Name\"\r\n                rules={[\r\n                {\r\n                    required: true,\r\n                },\r\n                {\r\n                    pattern: new RegExp(/^[a-zA-Z0-20]+$/),\r\n\r\n                    message: \"Accept only alphabets\"\r\n                }\r\n                ]}\r\n            >\r\n                <Input\r\n                maxlength=\"20\"\r\n                />\r\n            </Form.Item>\r\n            <Form.Item  {...layout}\r\n            name={['Last Name']} label=\"Last Name\"\r\n                rules={[\r\n                {\r\n                    required: true,\r\n                },\r\n                {\r\n                    pattern: new RegExp(/^[a-zA-Z0-20]+$/),\r\n\r\n                    message: \"Accept only alphabets\"\r\n                }\r\n                ]}\r\n            >\r\n                <Input\r\n                maxlength=\"20\"\r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item  {...layout}\r\n            name={['Class']} label=\"Class\"\r\n                rules={[\r\n                {\r\n                    required: true,\r\n                },\r\n                {\r\n                    pattern: new RegExp(/^[1-9][A-Z]+$/),\r\n                    message: \"Enter class section (It can be 5A or 6A)\",\r\n                },\r\n                ]}\r\n            >\r\n                <Input/>\r\n            </Form.Item>\r\n\r\n            <Form.Item  {...layout}\r\n            name={['Passing Year']} label=\"Passing Year\"\r\n            rules={[\r\n                    {\r\n                    required: true,\r\n                    },\r\n                    {\r\n                type:'number',\r\n                max:2017,\r\n                    }\r\n                ]}\r\n                >\r\n                <InputNumber />\r\n            </Form.Item>\r\n\r\n            <Form.Item  {...layout}\r\n            name={['Percentage']} label=\"Percentage\"\r\n            rules={[\r\n                {\r\n                required: true,\r\n                },\r\n                {\r\n                    pattern: new RegExp(/^(100(\\.00?)?|[1-9]?\\d(\\.\\d\\d?)?)$/),\r\n                    message: \"Accept in number only 0 to 100 \",\r\n                },\r\n                ]}>\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item {...buttonItemLayout}>\r\n                <Button\r\n                type=\"primary\"  htmlType=\"submit\">\r\n                Submit\r\n                </Button>\r\n            </Form.Item>\r\n\r\n           <Form.Item {...buttonItemLayout}>\r\n          <Button   type=\"primary\" ><a href=\"/\">Student List</a></Button>\r\n          </Form.Item>\r\n          </Form>\r\n          </Card>\r\n        </div>\r\n    );\r\n}\r\nexport default StudentAddForm;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport StudentDetail from \"./page/student_details/student_detail\";\nimport StudentAddForm from \"./page/student_add/index\";\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={StudentDetail} />\n          <Route exact path=\"/add\" component={StudentAddForm} />\n          <Route path=\"*\" component={() => \"404 NOT FOUND\"} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}